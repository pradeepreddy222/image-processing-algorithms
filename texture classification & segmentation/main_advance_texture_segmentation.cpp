/*

Version of OS - Ubuntu 18.04.3 LTS
IDE - Visual Studio Code for C++
Compiler- g++ (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0
Linker - g++
Image Viewing Software - ImageJ (http://rsb.info.nih.gov/ij/)

Copyright Â© 2020 Yogesh Gajjar. All rights reserved.

STEPS TO RUN THE CODE 
1.  Open terminal and change the directory where the source code files are downloaded. 
2.  Compile the codes using: "g++ sourcecode.cpp -o output 
3.  Run and execute the code and then write "./output input_image.raw output_image.raw height width BytePerPixel windowsize
4.  Use the Image Viewing Software to see the results.

*/ 

#include <iostream>
#include <algorithm> 
#include <vector>
#include <string>
#include <sstream>
#include <cmath>
#include <math.h>
#include <fstream> 
#include "advance_texture_segmentation.h"

using namespace std;


int main(int argc, char *argv[]) {
    int height{atoi(argv[3])}, width{atoi(argv[4])}, featureWidth{15}, windowSize{atoi(argv[5])};
    string file_input{argv[1]}, file_output7{argv[2]}, stringchoice{argv[4]}; 

    AdvanceSegmentation *feature = new AdvanceSegmentation(height, width, 15);
    unsigned char *Imagedata = new unsigned char[height*width];

    if (stringchoice == "write") {
        cout << "Write mode: " << endl;
        feature->readImage(file_input, Imagedata);
        feature->generateImage(Imagedata);
        feature->subtractImageMean();
        feature->applyLawFilters();
        feature->calculateEnergy(featureWidth);
        feature->PCA(stringchoice);
        cout << "Step 1: Open MATLAB and run the file advance_classification.m. That file will read the .txt generated by this program and will perform PCA." << endl;
        cout << "Step 2: After executing the all MATLAB files, run the next mode i.e read." << endl;  
    }
    if (stringchoice == "read") {
        cout << "Write mode: " << endl;
        feature->readImage(file_input, Imagedata);
        feature->generateImage(Imagedata);
        feature->subtractImageMean();
        feature->applyLawFilters();
        feature->calculateEnergy(featureWidth);
        feature->PCA(stringchoice);
        feature->writeImage(file_output7, feature->kMeans(5));
    }


    delete feature;
    delete [] Imagedata;
    return 0;
}